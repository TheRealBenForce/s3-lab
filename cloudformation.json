{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Metadata": {

    },
    "Parameters": {
      "SiteBucketName": {
          "Description": "Static website name. If registering with route 53, must be exact url (ie www.foo.io).",
          "Type": "String",
          "Default": ""
      },
      "LogsBucketName": {
          "Description": "For collecting logs from S3, CloudFront, and emails from SES",
          "Type": "String",
          "Default": ""
      },
      "Project": {
          "Description": "Name of your project for various resource tags.",
          "Type": "String",
          "Default": ""
      },
      "NakedDomainName": {
          "Description": "Optional. For registering your S3 website endpoint to a Route 53 Alias record set.",
          "Type": "String",
          "Default": ""
      },
      "SubDomainName": {
          "Description": "Optional. Alphanumeric. For also pointing your Cloudfront distribution to something like www, blog, photos.",
          "Type": "String",
          "AllowedPattern" : "^[a-zA-Z0-9]*$",
          "Default": "www"
      },
      "Branch": {
          "Description": "Branch name to poll for changes in.",
          "Type": "String"
      },
      "SupportEmail": {
          "Description": "For receiving SNS notifications",
          "Type": "String"
      },
      "GitHubOwner": {
          "Description": "Name of the GitHub repo Owner",
          "Type": "String"
      },
      "GitHubRepo": {
          "Description": "Name of the GitHub repo",
          "Type": "String"
      },
      "GitHubOAuthToken": {
          "Description": "If using Github, token to allow access to repo",
          "NoEcho" : "True",
          "Type": "String"
      },
      "PipelineName": {
          "Description": "Name for your build pipeline.",
          "Type": "String",
          "Default": "BuildStaticSite"
      }
    },
    "Mappings": {

    },
    "Conditions": {
      "HasDomain" : {
         "Fn::Not" : [{"Fn::Equals" : [{"Ref" : "NakedDomainName"}, ""]}]
       },
       "HasSubDomain" : {
          "Fn::Not" : [{"Fn::Equals" : [{"Ref" : "SubDomainName"}, ""]}]
        }
    },

    "Resources": {
      "myS3Bucket": {
        "Type": "AWS::S3::Bucket",
        "DeletionPolicy": "Retain",
        "Properties": {
          "AccessControl": "PublicRead",
          "BucketName": { "Ref": "SiteBucketName" },
          "LoggingConfiguration":
            {
              "DestinationBucketName" : { "Ref": "myS3LogBucket" },
              "LogFilePrefix" : "S3"
            },
          "CorsConfiguration": {
            "CorsRules" : [{
  							"AllowedHeaders" : ["*"],
  							"AllowedMethods" : ["GET"],
  							"AllowedOrigins" : ["*"],
  							"MaxAge" : "3000"
              }]
          },
          "VersioningConfiguration": {"Status": "Enabled"},
          "WebsiteConfiguration":
            {
              "ErrorDocument" : "error.html",
              "IndexDocument" : "index.html"
            },
          "Tags": [{"Key" : "Project", "Value" : { "Ref": "Project" }}]
        }
      },

      "myS3StagingBucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "PublicRead",
          "BucketName": {"Fn::Join" : [".",[ "staging", { "Ref": "SiteBucketName" } ] ]},
          "LoggingConfiguration":
            {
              "DestinationBucketName" : { "Ref": "myS3LogBucket" },
              "LogFilePrefix" : "Staging"
            },
          "CorsConfiguration": {
            "CorsRules" : [{
  							"AllowedHeaders" : ["*"],
  							"AllowedMethods" : ["GET"],
  							"AllowedOrigins" : ["*"],
  							"MaxAge" : "3000"
              }]
          },
          "WebsiteConfiguration":
            {
              "ErrorDocument" : "error.html",
              "IndexDocument" : "index.html"
            },
          "Tags": [{"Key" : "Project", "Value" : { "Ref": "Project" }}]
        }
      },

      "myS3BucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "DependsOn" : "myS3Bucket",
        "Properties": {
          "Bucket" : { "Ref": "SiteBucketName" },
          "PolicyDocument" : {
            "Version":"2012-10-17",
            "Statement": [{
              "Sid": "Allow Public GET request",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[ "arn:aws:s3:::", { "Ref": "SiteBucketName" }, "/*" ] ]}}]}
        }
      },

      "myS3LogBucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl" : "LogDeliveryWrite",
          "BucketName": { "Ref": "LogsBucketName" },
          "CorsConfiguration": {
            "CorsRules" : [{
  							"AllowedHeaders" : ["*"],
  							"AllowedMethods" : ["GET"],
  							"AllowedOrigins" : ["*"],
  							"MaxAge" : "3000"
              }]
          },
          "Tags": [{"Key" : "Project", "Value" : { "Ref": "Project" }}]
        }
      },

      "myS3StagingBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket" : { "Ref": "myS3StagingBucket" },
          "PolicyDocument" : {
            "Version":"2012-10-17",
            "Statement": [{
              "Sid": "Allow Public GET request",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[ "arn:aws:s3:::", { "Ref": "myS3StagingBucket" }, "/*" ] ]}}]}
        }
      },

      "myS3LogBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket" : { "Ref": "myS3LogBucket" },
          "PolicyDocument" :{
                "Version": "2008-10-17",
                "Statement": [
                    {
                        "Sid": "GiveSESPermissionToWriteEmail",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ses.amazonaws.com"]},
                        "Action": ["s3:PutObject"],
                        "Resource": {"Fn::Join" : ["",[ "arn:aws:s3:::", { "Ref": "myS3LogBucket" }, "/emails/*" ] ]},
                        "Condition": {
                            "StringEquals": {
                                "aws:Referer": { "Ref": "AWS::AccountId" }
          }}}]}
        }
      },

      "myCodePipelineBucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "Private",
          "BucketName": {"Fn::Join" : [".",[ "codepipeline", { "Ref": "myS3Bucket" } ] ]},
          "Tags": [{"Key" : "Project", "Value" : { "Ref": "Project" }}]
        }
      },

      "myCertificate" : {
        "Condition" : "HasDomain",
        "Type" : "AWS::CertificateManager::Certificate",
        "Properties" : {
          "DomainName" : { "Ref": "NakedDomainName" },
          "SubjectAlternativeNames" : {"Fn::If": [ "HasSubDomain",
            [{ "Ref": "NakedDomainName" },{"Fn::Join" : [".",[ { "Ref": "SubDomainName" }, { "Ref": "NakedDomainName" } ] ]} ],
            [{ "Ref": "AWS::NoValue" }]
            ]
          },
          "Tags" : [{"Key" : "Project", "Value" : { "Ref": "Project" }}]
        }
      },

      "myStagingCertificate" : {
        "Condition" : "HasDomain",
        "Type" : "AWS::CertificateManager::Certificate",
        "Properties" : {
          "DomainName" : { "Ref": "myS3StagingBucket" },
          "Tags" : [{"Key" : "Project", "Value" : { "Ref": "Project" }}]
        }
      },

      "myDistribution" : {
          "Condition" : "HasDomain",
          "DependsOn" : "myCertificate",
          "Type" : "AWS::CloudFront::Distribution",
          "Properties" : {
              "DistributionConfig" : {
                  "Aliases" : {"Fn::If": [ "HasSubDomain",
                    [{ "Ref": "NakedDomainName" },{"Fn::Join" : [".",[ { "Ref": "SubDomainName" }, { "Ref": "NakedDomainName" } ] ]} ],
                    [{ "Ref": "NakedDomainName" }]
                    ]
                  },
                  "Origins" : [ {
                          "DomainName" : {"Fn::Join" : ["",[ { "Ref": "myS3Bucket" }, ".s3-website-", { "Ref": "AWS::Region" }, ".amazonaws.com" ] ]},
                          "Id" : {"Fn::Join" : ["",[ { "Ref": "myS3Bucket" }, "-Origin" ] ]},
                          "CustomOriginConfig" : {
                              "HTTPPort" : "80",
                              "HTTPSPort" : "443",
                              "OriginProtocolPolicy" : "http-only"
                          }
                  } ],
                  "Enabled" : "true",
                  "Comment" : {"Fn::Join" : ["",[ "Distribution for ", { "Ref": "NakedDomainName" } ] ]},
                  "DefaultRootObject" : "index.html",
                  "DefaultCacheBehavior" : {
                      "TargetOriginId" : {"Fn::Join" : ["",[ { "Ref": "myS3Bucket" }, "-Origin" ] ]},
                      "ForwardedValues" : {
                          "QueryString" : "false",
                          "Cookies" : { "Forward" : "all" }
                      },
                      "ViewerProtocolPolicy" : "redirect-to-https"
                  },
                  "CustomErrorResponses" : [ {
                      "ErrorCode" : "404",
                      "ResponsePagePath" : "/error.html",
                      "ResponseCode" : "200",
                      "ErrorCachingMinTTL" : "30"
                  } ],
                  "Logging" :
                    {
                      "Bucket" : { "Fn::GetAtt" : [ "myS3LogBucket", "DomainName" ]},
                      "IncludeCookies" : "true",
                      "Prefix" : "CloudFront"
                    },
                  "PriceClass" : "PriceClass_100",
                  "ViewerCertificate": {
                    "AcmCertificateArn" : { "Ref": "myCertificate" },
                    "SslSupportMethod" : "sni-only"
                  }
              }
          }
      },

      "myDNS" : {
          "Type" : "AWS::Route53::RecordSetGroup",
          "Condition" : "HasDomain",
          "DependsOn" : "myDistribution",
          "Properties" : {
              "HostedZoneName" : {"Fn::Join" : ["",[ { "Ref": "NakedDomainName" }, "." ] ]},
              "RecordSets" : [{
                  "Name" : { "Ref" : "NakedDomainName" },
                  "Type" : "A",
                  "AliasTarget" : {
                      "HostedZoneId" : "Z2FDTNDATAQYW2",
                      "DNSName" : { "Fn::GetAtt" : [ "myDistribution", "DomainName" ]}
                  }}]
          }
      },

      "mySubDNS" : {
          "Type" : "AWS::Route53::RecordSetGroup",
          "Condition" : "HasSubDomain",
          "DependsOn" : "myDistribution",
          "Properties" : {
              "HostedZoneName" : {"Fn::Join" : ["",[ { "Ref": "NakedDomainName" }, "." ] ]},
              "RecordSets" : [{
                  "Name" : {"Fn::Join" : [".",[ { "Ref": "SubDomainName" }, { "Ref": "NakedDomainName" } ] ]},
                  "Type" : "A",
                  "AliasTarget" : {
                      "HostedZoneId" : "Z2FDTNDATAQYW2",
                      "DNSName" : { "Fn::GetAtt" : [ "myDistribution", "DomainName" ]}
                  }}]
          }
      },

      "myStagingDistribution" : {
          "Condition" : "HasDomain",
          "DependsOn" : "myStagingCertificate",
          "Type" : "AWS::CloudFront::Distribution",
          "Properties" : {
              "DistributionConfig" : {
                  "Aliases" : [
                    { "Ref": "myS3StagingBucket" }
                  ],
                  "Origins" : [ {
                          "DomainName" : {"Fn::Join" : ["",[ { "Ref": "myS3StagingBucket" }, ".s3-website-", { "Ref": "AWS::Region" }, ".amazonaws.com" ] ]},
                          "Id" : {"Fn::Join" : ["",[ { "Ref": "myS3StagingBucket" }, "-Origin" ] ]},
                          "CustomOriginConfig" : {
                              "HTTPPort" : "80",
                              "HTTPSPort" : "443",
                              "OriginProtocolPolicy" : "http-only"
                          }
                  } ],
                  "Enabled" : "true",
                  "Comment" : {"Fn::Join" : ["",[ "Distribution for ", { "Ref": "myS3StagingBucket" } ] ]},
                  "DefaultRootObject" : "index.html",
                  "DefaultCacheBehavior" : {
                      "TargetOriginId" : {"Fn::Join" : ["",[ { "Ref": "myS3StagingBucket" }, "-Origin" ] ]},
                      "ForwardedValues" : {
                          "QueryString" : "false",
                          "Cookies" : { "Forward" : "all" }
                      },
                      "ViewerProtocolPolicy" : "redirect-to-https"
                  },
                  "CustomErrorResponses" : [ {
                      "ErrorCode" : "404",
                      "ResponsePagePath" : "/error.html",
                      "ResponseCode" : "200",
                      "ErrorCachingMinTTL" : "30"
                  } ],
                  "Logging" :
                    {
                      "Bucket" : { "Fn::GetAtt" : [ "myS3LogBucket", "DomainName" ]},
                      "IncludeCookies" : "true",
                      "Prefix" : "CloudFrontStaging"
                    },
                  "PriceClass" : "PriceClass_100",
                  "ViewerCertificate": {
                    "AcmCertificateArn" : { "Ref": "myStagingCertificate" },
                    "SslSupportMethod" : "sni-only"
                  }
              }
          }
      },

      "myStagingDNS" : {
          "Type" : "AWS::Route53::RecordSetGroup",
          "Condition" : "HasDomain",
          "DependsOn" : "myStagingDistribution",
          "Properties" : {
              "HostedZoneName" : {"Fn::Join" : ["",[ { "Ref": "NakedDomainName" }, "." ] ]},
              "RecordSets" : [{
                  "Name" : { "Ref" : "myS3StagingBucket" },
                  "Type" : "A",
                  "AliasTarget" : {
                      "HostedZoneId" : "Z2FDTNDATAQYW2",
                      "DNSName" : { "Fn::GetAtt" : [ "myStagingDistribution", "DomainName" ]}
                  }}]
          }
      },

      "myPipeline" :  {
        "Type" : "AWS::CodePipeline::Pipeline",
        "Properties" : {
          "Name" : { "Ref": "PipelineName" },
          "ArtifactStore" : {
            "Type": "S3",
            "Location": { "Ref": "myCodePipelineBucket" }
          },
          "RestartExecutionOnUpdate" : "False",
          "RoleArn" : {"Fn::GetAtt" : ["myPipelineServiceRole", "Arn"] },
          "Stages" : [
            {
              "Name" : "Source",
              "Actions": [

                {
                  "Name": "SourceCheckout",
                  "ActionTypeId": {
                    "Category": "Source",
                    "Owner": "ThirdParty",
                    "Version": "1",
                    "Provider": "GitHub"
                  },
                  "Configuration": {
                      "Owner": { "Ref": "GitHubOwner" },
                      "Repo": { "Ref": "GitHubRepo" },
                      "PollForSourceChanges" : "True",
                      "Branch" : { "Ref": "Branch" },
                      "OAuthToken" : { "Ref": "GitHubOAuthToken" }
                  },
                  "OutputArtifacts": [
                    {
                      "Name": "SourceCode"
                    }
                  ],
                  "RunOrder": 1
                }
              ]
            },
            {
              "Name" : "CodeBuildStaging",
              "Actions": [
                {
                  "Name": "BuildStaging",
                  "InputArtifacts" : [{"Name" : "SourceCode"}],
                  "ActionTypeId": {
                    "Category": "Build",
                    "Owner": "AWS",
                    "Version": "1",
                    "Provider": "CodeBuild"
                  },
                  "Configuration" : {
                    "ProjectName" : { "Ref": "myStagingCodeBuild" }
                  },
                  "RunOrder": 1
                }
              ]
            },
            {
              "Name":"ApprovalNeeded",
              "Actions":[
                {
                  "InputArtifacts":[

                  ],
                  "Name":"ApprovalNeeded",
                  "ActionTypeId":{
                    "Category":"Approval",
                    "Owner":"AWS",
                    "Version":"1",
                    "Provider":"Manual"
                  },
                  "OutputArtifacts":[

                  ],
                  "Configuration":{
                    "NotificationArn": {"Ref":"myTopic"},
                    "CustomData":{"Fn::Join" : ["",[ "Staging code ready for approval at http://", { "Ref": "myS3StagingBucket" } ] ]}
                  },
                  "RunOrder":1
                }
              ]
            },
            {
              "Name" : "CodeBuildProduction",
              "Actions": [
                {
                  "Name": "BuildProduction",
                  "InputArtifacts" : [{"Name" : "SourceCode"}],
                  "ActionTypeId": {
                    "Category": "Build",
                    "Owner": "AWS",
                    "Version": "1",
                    "Provider": "CodeBuild"
                  },
                  "Configuration" : {
                    "ProjectName" : { "Ref": "myProductionCodeBuild" }
                  },
                  "RunOrder": 1
                }
              ]
            }
          ]
        }
      },

      "myStagingCodeBuild": {
        "Type": "AWS::CodeBuild::Project",
        "Properties": {
          "Name": "BuildStaging",
          "Description": "Builds jekyll static site content and uploads to Staging S3 bucket.",
          "ServiceRole": { "Fn::GetAtt": [ "myPipelineServiceRole", "Arn" ] },
          "Artifacts": {
            "Type": "CODEPIPELINE"
          },
          "Environment": {
            "Type": "LINUX_CONTAINER",
            "ComputeType": "BUILD_GENERAL1_SMALL",
            "Image": "aws/codebuild/ruby:2.3.1",
            "EnvironmentVariables": [
              {
                "Name": "STAGING_S3_BUCKET",
                "Value": {"Fn::Join" : ["",[ "s3://", { "Ref": "myS3StagingBucket" } ] ]}
              },
              {
                "Name": "PROD_S3_BUCKET",
                "Value": {"Fn::Join" : ["",[ "s3://", { "Ref": "myS3Bucket" } ] ]}
              },
              {
                "Name": "BUILD_STAGE",
                "Value": "STAGING"
              },
              {
                "Name": "AWS_REGION",
                "Value": { "Ref": "AWS::Region" }
              }
            ]
          },
          "Source": {
            "Type": "CODEPIPELINE"
          },
          "TimeoutInMinutes": 5,
          "Tags": [
            {
              "Key": "Key1",
              "Value": "Value1"
            },
            {
              "Key": "Key2",
              "Value": "Value2"
            }
          ]
        }
      },


            "myProductionCodeBuild": {
              "Type": "AWS::CodeBuild::Project",
              "Properties": {
                "Name": "BuildProduction",
                "Description": "Builds jekyll static site content and uploads to Production S3 bucket.",
                "ServiceRole": { "Fn::GetAtt": [ "myPipelineServiceRole", "Arn" ] },
                "Artifacts": {
                  "Type": "CODEPIPELINE"
                },
                "Environment": {
                  "Type": "LINUX_CONTAINER",
                  "ComputeType": "BUILD_GENERAL1_SMALL",
                  "Image": "aws/codebuild/ruby:2.3.1",
                  "EnvironmentVariables": [
                    {
                      "Name": "STAGING_S3_BUCKET",
                      "Value": {"Fn::Join" : ["",[ "s3://", { "Ref": "myS3StagingBucket" } ] ]}
                    },
                    {
                      "Name": "PROD_S3_BUCKET",
                      "Value": {"Fn::Join" : ["",[ "s3://", { "Ref": "myS3Bucket" } ] ]}
                    },
                    {
                      "Name": "BUILD_STAGE",
                      "Value": "PRODUCTION"
                    },
                    {
                      "Name": "AWS_REGION",
                      "Value": { "Ref": "AWS::Region" }
                    }
                  ]
                },
                "Source": {
                  "Type": "CODEPIPELINE"
                },
                "TimeoutInMinutes": 5,
                "Tags": [
                  {
                    "Key": "Key1",
                    "Value": "Value1"
                  },
                  {
                    "Key": "Key2",
                    "Value": "Value2"
                  }
                ]
              }
            },

      "myTopic": {
        "Type": "AWS::SNS::Topic",
        "Properties": {
          "DisplayName": "benforce.io infrastructure updates",
          "Subscription" : [ {
              "Endpoint" : { "Ref": "SupportEmail" },
              "Protocol" : "email"
          } ]
        }
      },

      "myPipelineServiceRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                 "Effect": "Allow",
                 "Principal": {
                    "Service": [
                      "codebuild.amazonaws.com",
                      "codepipeline.amazonaws.com"
                    ]
                 },
                 "Action": [ "sts:AssumeRole" ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName" : "CodeBuildAndPipeline",
                "PolicyDocument" : {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Action": "sns:Publish",
                      "Resource": { "Ref": "myTopic" },
                      "Effect": "Allow"
                    },
                    {
                      "Action": "logs:*",
                      "Resource": "arn:aws:logs:*:*:*",
                      "Effect": "Allow"
                    },
                    {
                      "Action": [
                          "s3:*"
                      ],
                      "Resource": [
                        {"Fn::Join" : ["",[ { "Fn::GetAtt" : [ "myCodePipelineBucket", "Arn" ]}, "/*" ] ]},
                        {"Fn::Join" : ["",[ { "Fn::GetAtt" : [ "myS3StagingBucket", "Arn" ]}, "/*" ] ]},
                        {"Fn::Join" : ["",[ { "Fn::GetAtt" : [ "myS3Bucket", "Arn" ]}, "/*" ] ]}
                      ],
                      "Effect": "Allow"
                    },
                    {
                      "Action": "codebuild:*",
                      "Resource": "*",
                      "Effect": "Allow"
                    }
                  ]
                }
              }
            ]
         }
       }
    },

    "Outputs": {
      "myS3Bucket" : {
        "Description" : "S3 URL for website.",
        "Value" : { "Fn::GetAtt" : [ "myS3Bucket", "WebsiteURL" ]}
      },
      "myS3StagingBucket" : {
        "Description" : "S3 URL for staging website.",
        "Value" : {"Fn::Join" : [".",[ "staging", { "Ref" : "NakedDomainName" } ] ]}
      }
    }
}
